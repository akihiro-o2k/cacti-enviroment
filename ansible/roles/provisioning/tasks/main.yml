- name: Update and upgrade apt packages
  apt:
    upgrade: "yes"
    update_cache: yes

# gitとunzipをインストール
- name: instoration git and uzip 
  become: yes
  apt:
    name:
      - software-properties-common
      - git
      - unzip
      - vim
      - autoconf
      - patch
      - build-essential 
      - rustc 
      - libssl-dev 
      - libyaml-dev 
      - libreadline6-dev 
      - zlib1g-dev 
      - libgmp-dev 
      - libncurses5-dev 
      - libffi-dev 
      - libgdbm6 
      - libgdbm-dev 
      - libdb-dev
      - uuid-dev

# 手動でppa:ansible/ansibleのGPGKEYを追加
# ref: https://launchpad.net/~ansible/+archive/ubuntu/ansible
- name: uplaod ppa:ansible Key file
  become: yes
  template:
    src:  tmp/ppa_ansible.key
    dest: /tmp/ppa_ansible.key
    owner: root
    group: root
    mode: 0644

- name: add ppa:ansible apt-key
  become: yes
  ansible.builtin.apt_key:
    file: /tmp/ppa_ansible.key
    state: present

# 手動で/etc/apt/sources.listにリポジトリを追加
- name: Add ppa:ansible/ansible Repository
  become: yes
  apt_repository:
    repo: "deb https://ppa.launchpadcontent.net/ansible/ansible/ubuntu {{os_alias}} main"
    state: present
    filename: ppa_ansible

# 手動でgoogle-chromeのGPGKEYを追加
# ref: https://qiita.com/ekzemplaro/items/11539f5bd9b80a6c7dca
# ref: https://www.slimjet.com/chrome/google-chrome-old-version.php 
- name: uplaod google-chrome Key file
  template:
    src:  tmp/google-chrome.key
    dest: /tmp/google-chrome.key
    owner: root
    group: root
    mode: 0644

- name: add google-chrome apt-key
  become: yes
  ansible.builtin.apt_key:
    file: /tmp/google-chrome.key
    state: present

# 手動で/etc/apt/sources.listにリポジトリを追加
- name: Add google-chrome Repository
  become: yes
  apt_repository:
    repo: "deb http://dl.google.com/linux/chrome/deb/ stable main"
    state: present
    filename: google-chrome


# Aptリポジトリを追加したのでパッケージ取得のためにaptリポジトリの更新
- name: Apt update
  become: yes
  apt:
    update_cache: yes

- name: Install google-chrome with specified version 
  become: yes
  apt:
    name: "google-chrome-stable"

- name: chrome-version check
  shell: "google-chrome --version | cut -d' ' -f3"
  register: chrome_version

- name: debug chrome_version
  debug:
    msg: "{{ chrome_version.stdout }}"

- name: download chromedriver-linux64.zip
  ansible.builtin.get_url:
    url: "https://storage.googleapis.com/chrome-for-testing-public/{{ chrome_version.stdout }}/linux64/chromedriver-linux64.zip"
    dest: /tmp/chromedriver-linux64.zip
    owner: develop
    group: develop
    mode: 0775
  when: stage == 'develop'

- name: upload chromedriver-linux64.zip
  ansible.builtin.unarchive:
    src: "/usr/local/packages/chromedriver-linux64.zip"
    dest: /tmp/
    owner: develop
    group: develop
    mode: 0775
  when: stage == 'production'

# chromodriverインストールディレクトリの存在確認
- name: unarchive_dir check for /tmp
  stat:
    path: "/tmp/chromedriver-linux64"
  register: chromedriver_dir

# chromedriver_dirが存在しないケースではunzipして作成
- name: unzip chromedriver-linux64.zip
  ansible.builtin.unarchive:
    src: "/tmp/chromedriver-linux64.zip"
    dest: /tmp/
    remote_src: yes
  when:
    - chromedriver_dir.stat.exists == false

# 再度chromodriverインストールディレクトリの存在確認
- name: unarchive_dir check for /usr/local/bin
  stat:
    path: "/usr/local/bin/chromedriver"
  register: chromedriver

# Chrome-driverの配置
- name: install chromodriver
  become: yes
  command:
    cmd: "mv /tmp/chromedriver-linux64/chromedriver /usr/local/bin/"
  when:
    - chromedriver.stat.exists == false

# chromedriverにパーミッションを設定
- name: set permission /usr/local/bin/chromedriver
  become: yes
  command:
     cmd: "chmod 777 /usr/local/bin/chromedriver"

# chromedriverにパスが通っているか確認
- name: check to chromedriver path
  shell: "whereis chromedriver"
  register: chromedriver_path

# pathを画面出力(動作確認用)
- name: debug chromedriver_path
  debug:
    msg: "{{ chromedriver_path.stdout }}"

# versionの表示でchromodriverの実行ファイル動作確認
- name: execute chromedriver --version command
  shell: "chromedriver --version"
  register: chromedriver_version

# util: ファイルの有無をレジスターに登録
- name: is_exist /usr/local/ebenv
  stat:
    path: "/usr/lib/rbenv"
  register: rbenv

#
# 以下、rubyで動作するSelenium-driverを動かす為のplay-book
#

# gitよりrbenvを取得する処理(標準催促のルールでrubyが指定バージョン以上の必要がある為)
- name: git clone rbenv
  become: yes
  command:
    cmd: "git clone https://github.com/rbenv/rbenv.git /usr/lib/rbenv"
  when:
    - rbenv.stat.exists == false

# ruby格納ディレクトリのオーナーをdevelopに
- name: chown rbenv
  become: yes
  command:
    cmd: "chown -R develop:develop /usr/lib/rbenv"

# 後工程の為にdirectory有無判定を変数に格納
- name: is_exist /usr/local/ruby-build
  stat:
    path: "/usr/lib/rbenv/plugins/ruby-build"
  register: ruby_build

# rubybuildバージョンをなるべく最新化する為に、gitよりruby-buildを取得する。
- name: git clone ruby-build
  become: yes
  command:
    cmd: "git clone https://github.com/sstephenson/ruby-build.git /usr/lib/rbenv/plugins/ruby-build"
  when:
    - ruby_build.stat.exists == false

# 後工程の為にdirectory有無判定を変数に格納
- name: is_exist check for /etc/profile.d/rbenv.sh
  stat:
    path: "/etc/profile.d/rbenv.sh"
  register: rbenv_sh

# ユーザー全体でrbenvで導入したrubyを使用する為に/etc/profile.dにスクリプトを追加
- name: uplaod /etc/profile.d/rbenv.sh
  become: yes
  template:
    src:  etc/profile.d/rbenv.sh
    dest: /etc/profile.d/rbenv.sh
    owner: root
    group: root
    mode: 0755
  when:
    - rbenv_sh.stat.exists == false

# 後工程の為にdirectory有無判定を変数に格納
- name: is_exist /usr/lib/rbenv/versions
  stat:
    path: "/usr/lib/rbenv/versions"
  register: rbenv_vers

# rbenvでインストールするrubyを格納する為のディレクトリを追加
- name: create dir /usr/lib/rbenv/versions
  become: yes
  command:
    cmd: "mkdir /usr/lib/rbenv/versions"
  when:
   - rbenv_vers.stat.exists == false

# rbenvのruby誰でも使用可能にする為、パーミッションを緩めに変更
- name: set parmisson /usr/lib/rbenv
  become: yes
  command:
    cmd: "chmod -R 777 /usr/lib/rbenv"

#
# 以下、rbenvでのrubyインストレーションに関するplay-book
#
 
# execute /etc/profile.d/rbenv.sh
- name: exec /etc/profile.d/rbenv.sh
  become: yes
  command:
     cmd: '/bin/bash -c /etc/profile.d/rbenv.sh'

# rbenvを初期化
- name: rbenv init
  become: yes
  shell: bash -lc "rbenv init -"

# rbenvによる、指定バージョンのrubyをインストールする為のコマンド
# 検証環境側で事前にrbenv install -lコマンドを叩いて導入可能なバージョンを判定の上変数を書き換える事!!
- name: "rbenv install ruby {{ ruby_version }}"
  become: yes
  shell: bash -lc "rbenv install --skip-existing {{ ruby_version }}"

# rbenvはディレクトリ単位でrubyバージョンを局所化するので全体で同一バージョンを利用できるように設定するコマンド
- name: rbenv global
  become: yes
  shell: bash -lc "rbenv global {{ ruby_version }}"

# ruby gemをインストール
- name: gem install selenium-webdriver
  become: yes
  shell: bash -lc "gem install selenium-webdriver"

